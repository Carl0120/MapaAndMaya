@page "/course/{CourseId:int}/sedes"
@using MapaAndMaya.Services
@using MapaAndMaya.Components.Areas.Courses.Components
@using MapaAndMaya.Services.Core.Models
@using MapaAndMaya.Services.Services

@inject SedeAssignmentService _sedeAssignmentService;
@inject CourseService _courseService;
@inject SedeService _sedeService;
@inject DialogService _dialogService;
@inject NotificationService _notificationService;

  @if (_courseNotFound)
   {
       <EmptyTemplate>
           <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">El curso no se Encuentra</p>
       </EmptyTemplate>
   }
   else if (Course != default)
   {
      
      <CourseViewComponent Course="Course"/>
      
       <RadzenRow JustifyContent="JustifyContent.End" AlignItems="AlignItems.End">
        <RadzenButton Icon="add_circle_outline" Text="Agregar" ButtonStyle="ButtonStyle.Primary" Click="@AddItem" class="my-3"/>
        <RadzenButton Icon="delete_forever" Text="Eliminar" Click="@DeleteItems" class="my-3" ButtonStyle="ButtonStyle.Danger" Disabled="@(SelectedItems == null || SelectedItems.Count == 0)"/>

    </RadzenRow>
    <RadzenDataGrid @ref="_grid" Data="@ItemsCollection" TItem="SedeCourse" AllowPaging="true" AllowColumnResize="true" style="box-shadow: var(--rz-shadow-5);"
                    PageSize="10" PagerHorizontalAlign="HorizontalAlign.Left" IsLoading="@_isLoading" ShowPagingSummary="true" PagingSummaryFormat="Página {0} de {1} <b>(total {2} filas)</b>" PageSizeOptions="@(new int[] { 5, 10, 20, 30 })"
                    AllowFiltering="true" FilterMode="FilterMode.Advanced" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                    AllowSorting="true" SelectionMode="DataGridSelectionMode.Multiple"  Density="Density.Default"  @bind-Value="@SelectedItems" >
    
        <EmptyTemplate>
            <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">Este curso no se imparte en ninguna Cede.</p>
        </EmptyTemplate>
    
    
        <Columns>
            <RadzenDataGridColumn TItem="SedeCourse" Width="60px" Sortable="false" Filterable="false">
                <HeaderTemplate>
                    <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?" InputAttributes="@(new Dictionary<string, object> { { "aria-label", "Select all items" } })"
                                    Value="@(SelectedItems == null || SelectedItems?.Any() != true ? false : !ItemsCollection.All(i => SelectedItems.Contains(i)) ? null : ItemsCollection.Any(i => SelectedItems.Contains(i)))"
                                    Change="@(args => SelectedItems = args == true ? ItemsCollection.ToList() : null)" />
                </HeaderTemplate>
                <Template Context="data">
                    <RadzenCheckBox TabIndex="-1" TriState="false" Value="@(SelectedItems != null && SelectedItems.Contains(data))" InputAttributes="@(new Dictionary<string, object> { { "aria-label", "Select item" } })"
                                    TValue="bool"/>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="SedeCourse" Property="Sede.Name" Title="Nombre de la Cede"/>
            <RadzenDataGridColumn TItem="SedeCourse" Property="Sede.Type.Name" Title="Tipo de Cede"/>
             <RadzenDataGridColumn TItem="SedeCourse" Property="Sede.Town.Name" Title="Municipio"/>
        </Columns>
    </RadzenDataGrid>
   }
   else
   {
       <EmptyTemplate>
           <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">Cargando...</p>
       </EmptyTemplate>
   }
@code{

    private async Task ShowFormularyDialog(Action onSummit, string title)
    {
        var result = await _dialogService.OpenAsync(title, ds =>
                @<EditForm Model="@ViewModel" OnValidSubmit="@onSummit">
                    <DataAnnotationsValidator/>
                    <div class="container-fluid">
                        <div class="row ">
                            <div class="col-md-6 pb-3">
                                <RadzenLabel Component="Sede" Text="Seleccionar Sedes"/> <br/>
                                <RadzenDropDown Style="width:300px" Name="Sede" AllowFiltering="true" @bind-Value="ViewModel.SedeIdList" Multiple=true AllowClear=true Placeholder="Selecciona las Cedes en la que se Impartirá el Curso"
                                                Chips=true
                                                Data="@(SedeList)" TextProperty="Name" ValueProperty="Id"/>
                                <ValidationMessage For="@(() => ViewModel.SedeIdList)"/>

                            </div>
                        </div>
                    </div>
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Right">
                        <RadzenButton ButtonType="ButtonType.Submit" Text="Guardar" Icon="save" class="me-1"/>
                        <RadzenButton Text="Cancelar" Icon="clear" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" class="me-1"/>
            </RadzenStack>
            </EditForm>
            , new DialogOptions { Width = $"{800}px" }
        );
    }

    private async Task BusyDialog(string message)
    {
        await _dialogService.OpenAsync("", _ =>
            @<RadzenStack AlignItems="AlignItems.Center" Gap="2rem" Class="rz-p-12">
                <RadzenText TextStyle="TextStyle.H6" Text="@message"></RadzenText>
        </RadzenStack>, new DialogOptions { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });
    }

}