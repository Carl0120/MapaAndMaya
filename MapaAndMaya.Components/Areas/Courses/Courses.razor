@page "/courses"
@using MapaAndMaya.Services
@using MapaAndMaya.Services.Core.Models
@using MapaAndMaya.Services.Services
@using MapaAndMaya.Services.Services.NomenclatureServices

@inject CourseService _courseService;
@inject AcademicCourseService _academicCourseService;
@inject ContextMenuService _contextMenuService;
@inject StudyPlanService _studyPlanService;
@inject DegreeService _degreeService;
@inject DialogService _dialogService;
@inject NotificationService _notificationService;
@inject NavigationManager  _navigationManager;

<HeaderComponent Name="Cursos"/>

<RadzenRow JustifyContent="JustifyContent.End" AlignItems="AlignItems.End">
    <RadzenButton Icon="add_circle_outline" Text="Agregar" ButtonStyle="ButtonStyle.Primary" Click="@AddItem" class="my-3"/>
    <RadzenButton Icon="delete_forever" Text="Eliminar" Click="@DeleteItems" class="my-3" ButtonStyle="ButtonStyle.Danger" Disabled="@(SelectedItems == null || SelectedItems.Count == 0)"/>
    <RadzenButton Icon="refresh" Text="Recargar" ButtonStyle="ButtonStyle.Light" Click="@ReloadGridButton" class="my-3"/>

</RadzenRow>
<RadzenDataGrid @ref="_grid" Data="@ItemsCollection" TItem="Course" AllowPaging="true" AllowColumnResize="true" style="box-shadow: var(--rz-shadow-5);"
                PageSize="10" PagerHorizontalAlign="HorizontalAlign.Left" IsLoading="@_isLoading" ShowPagingSummary="true" PagingSummaryFormat="Página {0} de {1} <b>(total {2} filas)</b>" PageSizeOptions="@(new int[] { 5, 10, 20, 30 })"
                AllowFiltering="true" FilterMode="FilterMode.Advanced" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                AllowSorting="true" SelectionMode="DataGridSelectionMode.Multiple"  @bind-Value="@SelectedItems">

    <EmptyTemplate>
        <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">Nada que mostrar.</p>
    </EmptyTemplate>


    <Columns>
        <RadzenDataGridColumn TItem="Course" Width="60px" Sortable="false" Filterable="false">
            <HeaderTemplate>
                <RadzenCheckBox TabIndex="-1" TriState="false" TValue="bool?" InputAttributes="@(new Dictionary<string, object> { { "aria-label", "Select all items" } })"
                                Value="@(SelectedItems == null || SelectedItems?.Any() != true ? false : !ItemsCollection.All(i => SelectedItems.Contains(i)) ? null : ItemsCollection.Any(i => SelectedItems.Contains(i)))"
                                Change="@(args => SelectedItems = args == true ? ItemsCollection.ToList() : null)" />
            </HeaderTemplate>
            <Template Context="data">
                <RadzenCheckBox TabIndex="-1" TriState="false" Value="@(SelectedItems != null && SelectedItems.Contains(data))" InputAttributes="@(new Dictionary<string, object> { { "aria-label", "Select item" } })"
                                TValue="bool"/>
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Course" Property="AcademicCourse.Name" Title="Curso Académico"/>
        <RadzenDataGridColumn TItem="Course" Property="DegreeModality.Degree.Name" Title="Carrera"/>
        <RadzenDataGridColumn TItem="Course" Property="DegreeModality.Modality.Name" Title="Modalidad"/>
        <RadzenDataGridColumn TItem="Course" Property="StudyPlan.Name" Title="Plan de Estudios"/>
        <RadzenDataGridColumn TItem="Course" Property="NumberOfYears" Title="Años de Duración"/>
           <RadzenDataGridColumn TItem="Course" Context="data" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="156px">
                           <Template Context="data">
                               <RadzenButton Text="Ir A " Icon="flight_takeoff" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium"
                                             Click="@( args => ShowContextMenuWithItems(args,data.Id))" @onclick:stopPropagation="true">
                                                                                                             </RadzenButton>
                                                                                                       
                               
                           </Template>
                           </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="Course" Context="data" Filterable="false" Sortable="false" TextAlign="TextAlign.Center" Width="156px">
            <Template Context="data">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium"
                              Click="@(_ => EditItem(data))" @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code{
    void ShowContextMenuWithItems(MouseEventArgs args,int id)
    { 
        Console.WriteLine("Lledo############");
        
        _contextMenuService.Open(args, ds =>
            @<RadzenMenu>
                <RadzenMenuItem Text="Maya Curricular" Click="@(_ => _navigationManager.NavigateTo($"course/{id}/subjects"))"></RadzenMenuItem>
                <hr />
                <RadzenMenuItem Text="Mapa de Carrera" Click="@(_ => _navigationManager.NavigateTo($"course/{id}/sedes"))"></RadzenMenuItem>
                
        </RadzenMenu>
    );}
    

    private async Task ShowFormularyDialog( ICollection<DegreeModality> DegreeModalities, Action onSummit, string title)
    {
       
        var result = await _dialogService.OpenAsync(title, ds =>
                @<EditForm Model="@ViewModel" OnValidSubmit="@onSummit">
                    <DataAnnotationsValidator/>
                    <div class="container-fluid">
                        <div class="row ">
                            <div class="col-md-6 pb-3">
                                <RadzenLabel Component="AcademicCourse" Text="Curso Académico"/> <br/>
                                <RadzenDropDown Style="width:300px" TValue="int" Name="AcademicCourse" Placeholder="Eliga un Curso Académico" AllowFiltering="true" @bind-Value="ViewModel.AcademicCourseId"
                                                Data="@(AcademicCourseCollection)"  TextProperty="Name" ValueProperty="Id" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Seleccione un  Curso Académico" } })"/>
                            </div>
                            <div class="col-md-6 pb-3">
                                <RadzenLabel Component="StudyPlan" Text="Plan de Estudio"/> <br/>
                                <RadzenDropDown Style="width:300px" TValue="int" Name="StudyPlan" Placeholder="Eliga un Plan de Estudio" AllowFiltering="true" @bind-Value="ViewModel.StudyPlanId"
                                                Data="@(StudyPlanCollection)" TextProperty="Name" ValueProperty="Id" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Seleccione un Plan de Estudio" } })"/>
                            </div>
                        </div>
                        <div class="row ">
                            <div class="col-md-6 pb-3">
                                <RadzenLabel Component="StudyPlan" Text="Carrera"/> <br/>
                                <RadzenDropDown Style="width:300px" TValue="int" Placeholder="Eliga una Carrera" AllowFiltering="true" @bind-Value="ViewModel.DegreeId"
                                                Data="@(DegreeCollection)"  TextProperty="Name" ValueProperty="Id" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Seleccione una Carrera" } })"
                                                Change="@((v) => { int id = (int)v; DegreeModalities = DegreeCollection.First(e => e.Id == id).DegreeModalities; _dialogService.Refresh(); })"/>

                            </div>
                            <div class="col-md-6 pb-3">
                                <RadzenLabel Component="Modalidad" Text="Modalidad"/> <br/>

                                <RadzenDropDown Style="width:300px" TValue="int" @bind-Value="ViewModel.DegreeModalityId" Placeholder="Eliga una Modalidad" AllowFiltering="true"
                                                Data="@(DegreeModalities)" TextProperty="Modality.Name" ValueProperty="Id" InputAttributes="@(new Dictionary<string, object>() { { "aria-label", "Seleccione una Modalidad" } })"/>
                            </div>
                        </div>
                    </div>
                    <RadzenStack Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.Right">
                        <RadzenButton ButtonType="ButtonType.Submit" Text="Guardar" Icon="save" class="me-1"/>
                        <RadzenButton Text="Cancelar" Icon="clear" Click="() => ds.Close(false)" ButtonStyle="ButtonStyle.Light" class="me-1"/>
            </RadzenStack>
            </EditForm>
            , new DialogOptions { Width = $"{800}px" }
        );
    }

    private async Task BusyDialog(string message)
    {
        await _dialogService.OpenAsync("", _ =>
            @<RadzenStack AlignItems="AlignItems.Center" Gap="2rem" Class="rz-p-12">
                <RadzenText TextStyle="TextStyle.H6" Text="@message"></RadzenText>
        </RadzenStack>, new DialogOptions { ShowTitle = false, Style = "min-height:auto;min-width:auto;width:auto", CloseDialogOnEsc = false });
    }


}